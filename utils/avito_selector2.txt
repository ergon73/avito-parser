–î–∞, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≥–ª—è–¥–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ\! –î–∞–Ω–Ω—ã–µ –ø–æ —Å—Å—ã–ª–∫–∞–º, –∑–∞–≥–æ–ª–æ–≤–∫–∞–º, —Ü–µ–Ω–∞–º, –æ–ø–∏—Å–∞–Ω–∏—è–º –∏, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ, **–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º** —Ç–µ–ø–µ—Ä—å —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å.

–û–¥–Ω–∞–∫–æ –µ—Å—Ç—å –æ–¥–∏–Ω –∑–∞–º–µ—Ç–Ω—ã–π –Ω—é–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π —á–∏—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö.

-----

### –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –ê–¥—Ä–µ—Å –∏ –¥–∞—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ

–ï—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü `address` –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–∏–¥–Ω–æ, —á—Ç–æ –∫ –∞–¥—Ä–µ—Å—É "–ø—Ä–∏–∫–ª–µ–∏–ª–∞—Å—å" –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

**–ü—Ä–∏–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –ë–î:**

  * `–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª., –û—Ä—Å–∫–í—á–µ—Ä–∞`
  * `–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª., –ü–µ–Ω–∑–∞, —Ä-–Ω –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥`

–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º—É, —á—Ç–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∞–¥—Ä–µ—Å, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π –±–ª–æ–∫ HTML, –≤–∫–ª—é—á–∞—è —Å–æ—Å–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞—Ç–æ–π.

-----

### –†–µ—à–µ–Ω–∏–µ

–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º. –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è Cursor. –û–Ω –≤–Ω–µ—Å—ë—Ç –Ω–µ–±–æ–ª—å—à–æ–µ, –Ω–æ –≤–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –≤–∞—à –ø–∞—Ä—Å–µ—Ä.

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∏–∂–µ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª `avito_selector_fix.md` –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ Cursor.

-----

# avito\_selector\_fix.md: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ Avito

## –¶–ï–õ–¨

–û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª `services/avito_processor.py`, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ—à–∏–±–æ—á–Ω–æ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–¥–Ω–æ –ø–æ–ª–µ. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —á–∏—Å—Ç–æ—Ç—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ SQLite.

-----

## –®–ê–ì 1: –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–ê–†–°–ò–ù–ì–ê –ê–î–†–ï–°–ê

–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `services/avito_processor.py` –Ω–∞ –∫–æ–¥ –Ω–∏–∂–µ. –í –Ω–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ –¥–≤–∞ —É–ª—É—á—à–µ–Ω–∏—è:

1.  **–¢–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞**, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.
2.  –ë–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç `NULL` –≤ –±–∞–∑–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç").

<!-- end list -->

```python
from bs4 import BeautifulSoup
from typing import List
from database.models import Listing
from config.settings import logger
from urllib.parse import urljoin

class AvitoProcessor:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Avito."""

    def __init__(self, base_url: str):
        self.base_url = base_url

    def process_html(self, html: str) -> List[Listing]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML.
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–∏—Ö –¥–∞–Ω–Ω—ã–µ.
        """
        soup = BeautifulSoup(html, 'lxml')
        listings = []
        
        items_container = soup.find("div", {"data-marker": "catalog-serp"})
        if not items_container:
            logger.warning("–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ ('catalog-serp') –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []

        items = items_container.find_all("div", {"data-marker": "item"}, recursive=False)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        for item_soup in items:
            try:
                if item_soup.find("div", {"data-marker": "promo-item"}):
                    continue
                
                listing = self._parse_item(item_soup)
                if listing and listing.url:
                    listings.append(listing)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        
        return listings

    def _get_text(self, soup: BeautifulSoup, tag: str, attrs: dict) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–≥–∞."""
        element = soup.find(tag, attrs)
        if not element:
            return None
        
        if tag == "meta":
            return element.get('content', '').strip()
            
        return element.text.strip()

    def _parse_images(self, item_soup: BeautifulSoup) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏, –≤—ã–±–∏—Ä–∞—è —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ.
        """
        images = []
        gallery_container = item_soup.find('div', {'data-marker': 'item-photo'})
        if not gallery_container:
            return []
            
        img_tags = gallery_container.find_all("img")
        
        for img in img_tags[:3]:
            if 'srcset' in img.attrs and img['srcset']:
                largest_image_url = img['srcset'].split(',')[-1].strip().split(' ')[0]
                images.append(largest_image_url)
            elif 'src' in img.attrs:
                 images.append(img['src'])
                 
        return images

    def _parse_item(self, item_soup: BeautifulSoup) -> Listing:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        
        link_tag = item_soup.find("a", {"data-marker": "item-title"})
        if not link_tag or not link_tag.has_attr('href'):
            return None

        relative_url = link_tag['href']
        absolute_url = urljoin(self.base_url, relative_url)
        
        title = self._get_text(item_soup, "h2", {"data-marker": "item-title"})
        price = self._get_text(item_soup, "meta", {"itemprop": "price"})
        
        description_div = item_soup.select_one('[class*="iva-item-descriptionStep"]')
        description = description_div.get_text(strip=True) if description_div else None

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–õ–ï–ö–¢–û–†: –ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–ª–æ–∫ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –¥–∞—Ç—É.
        address_div = item_soup.select_one('div[class*="geo-root-"]')
        address = address_div.get_text(strip=True) if address_div else None

        images = self._parse_images(item_soup)

        return Listing(
            url=absolute_url,
            title=title,
            price=price,
            address=address,
            description=description,
            images=images
        )

```

-----

–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ. üëç