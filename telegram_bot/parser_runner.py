"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞—Ä—Å–µ—Ä–æ–º - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ
"""
import threading
import time
from pathlib import Path
import sys
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent))

from database.database_manager import DatabaseManager
from core.playwright_parser import PlaywrightParser
from services.avito_processor import AvitoProcessor
from config.settings import settings


class ParserRunner:
    def __init__(self):
        self.is_running = False
        self.last_run = None
        self.last_result = None

    def run_parser(self, callback=None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        callback(status, message) - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–æ—Ç
        """
        if self.is_running:
            return {"success": False, "error": "–ü–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"}

        def _run():
            self.is_running = True
            start_time = time.time()

            try:
                if callback:
                    callback("started", "üöÄ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∑–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

                db = DatabaseManager()
                count_before = db.get_listings_count() if hasattr(db, 'get_listings_count') else 0

                parser = PlaywrightParser()
                url = settings.target_url
                html = parser.parse(url)

                if not html:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)")

                if callback:
                    callback("processing", "üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")

                processor = AvitoProcessor(settings.target_url)
                listings = processor.process_html(html)

                added = 0
                for listing in listings:
                    if db.add_listing(listing):
                        added += 1

                count_after = db.get_listings_count() if hasattr(db, 'get_listings_count') else 0
                elapsed = round(time.time() - start_time, 1)

                self.last_run = time.time()
                self.last_result = {
                    "success": True,
                    "found": len(listings),
                    "added": added,
                    "total": count_after,
                    "elapsed": elapsed
                }

                if callback:
                    message = (
                        f"‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                        f"üì¶ –ù–∞–π–¥–µ–Ω–æ: {len(listings)}\n"
                        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {added}\n"
                        f"üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {count_after}\n"
                        f"‚è± –í—Ä–µ–º—è: {elapsed} —Å–µ–∫"
                    )
                    callback("completed", message)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                self.last_result = {
                    "success": False,
                    "error": str(e)
                }
                if callback:
                    error_msg = str(e)
                    if "429" in error_msg or "rate" in error_msg.lower():
                        message = (
                            "‚ö†Ô∏è <b>Avito –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø</b>\n\n"
                            "–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-15 –º–∏–Ω—É—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN."
                        )
                    else:
                        message = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:\n<code>{error_msg[:200]}</code>"
                    callback("error", message)
            finally:
                self.is_running = False

        thread = threading.Thread(target=_run, daemon=True)
        thread.start()
        return {"success": True, "message": "–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω"}

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
        db = DatabaseManager()
        total = db.get_listings_count() if hasattr(db, 'get_listings_count') else 0

        status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.is_running else "‚è∏ –û–∂–∏–¥–∞–µ—Ç"

        last_run_text = "–ù–∏–∫–æ–≥–¥–∞"
        if self.last_run:
            minutes_ago = int((time.time() - self.last_run) / 60)
            if minutes_ago < 1:
                last_run_text = "–¢–æ–ª—å–∫–æ —á—Ç–æ"
            elif minutes_ago < 60:
                last_run_text = f"{minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                hours = minutes_ago // 60
                last_run_text = f"{hours} —á. –Ω–∞–∑–∞–¥"

        return {
            "status": status,
            "total": total,
            "last_run": last_run_text,
            "is_running": self.is_running
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
parser_runner = ParserRunner()


